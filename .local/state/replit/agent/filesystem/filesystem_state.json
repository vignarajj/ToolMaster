{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ToolMaster App\n\n## Overview\n\nToolMaster is a web-based utility application built with React, TypeScript, and Express.js. It provides a comprehensive suite of developer and productivity tools including text analysis, password generation, QR code creation, color management, and more. The application is designed to work entirely client-side with no external dependencies or user authentication required.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React 18 with TypeScript and follows a component-based architecture:\n\n- **UI Framework**: React with TypeScript for type safety\n- **Styling**: Tailwind CSS with shadcn/ui components for consistent design\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React hooks for local state, TanStack Query for server state\n- **Theme System**: Custom theme provider supporting light/dark modes with CSS variables\n- **Component Structure**: Modular components with separation between pages, layout, and UI components\n\n### Backend Architecture\nThe backend uses a minimal Express.js setup:\n\n- **Server Framework**: Express.js with TypeScript\n- **Development**: Vite for development server with HMR support\n- **Build Process**: ESBuild for production bundling\n- **Storage**: In-memory storage only (no persistent database)\n- **API**: Minimal REST endpoints for health checks\n\n### Design System\n- **Primary Color**: Orange (#d45202) for branding and accents\n- **Component Library**: shadcn/ui with Radix UI primitives\n- **Typography**: Inter font family\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n- **Icons**: Lucide React for consistent iconography\n\n### Application Structure\nThe application is organized into distinct tool modules:\n\n1. **Text Tools**:\n   - Text Counter: Real-time character, word, and reading time analysis\n   - Text Converter: Multiple text transformation utilities\n   - Base64 Encoder/Decoder: Encoding and decoding utilities\n\n2. **Security Tools**:\n   - Password Generator: Customizable secure password creation\n\n3. **Visual Tools**:\n   - QR Code Generator: Creates QR codes for various content types\n   - Color Picker: Color selection and palette management\n\n### Key Architectural Decisions\n\n**Client-Side Processing**: All tools operate entirely in the browser without server-side processing, ensuring privacy and reducing server load.\n\n**No Authentication**: The application operates without user accounts or authentication, making it immediately accessible.\n\n**Local Storage**: User preferences and data are stored in browser localStorage for persistence across sessions.\n\n**Type Safety**: Full TypeScript implementation ensures compile-time error detection and better developer experience.\n\n**Modular Design**: Each tool is implemented as a separate page component with shared utilities and UI components.\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form\n- **TypeScript**: Full TypeScript support for type safety\n- **Vite**: Development server and build tool\n- **Express.js**: Minimal backend server\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component library\n- **Radix UI**: Headless UI primitives for accessibility\n- **Lucide React**: Icon library\n- **class-variance-authority**: Component variant management\n\n### Utility Libraries\n- **TanStack Query**: Server state management\n- **Wouter**: Lightweight routing\n- **clsx & tailwind-merge**: Conditional CSS class management\n- **date-fns**: Date manipulation utilities\n\n### Development Tools\n- **ESBuild**: Fast JavaScript bundler\n- **PostCSS**: CSS processing with Autoprefixer\n- **Replit Plugins**: Development environment integration\n\n### Database (Future Consideration)\n- **Drizzle ORM**: Type-safe SQL query builder (configured but not actively used)\n- **PostgreSQL**: Database configuration present for potential future use\n- **Neon Database**: Serverless PostgreSQL provider integration ready\n\nThe application is designed to be fully functional without a database, but the infrastructure is prepared for future enhancements that might require persistent storage.","size_bytes":4282},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2868},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API routes for utility tools can be added here if needed\n  // Currently all tools work client-side only\n  \n  // Health check endpoint\n  app.get(\"/api/health\", (_req, res) => {\n    res.json({ status: \"ok\", message: \"ToolMaster API is running\" });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":519},"server/storage.ts":{"content":"// In-memory storage interface for utility tools (no database needed)\nexport interface IStorage {\n  // Future storage operations can be added here if needed\n}\n\nexport class MemStorage implements IStorage {\n  constructor() {\n    // Initialize any needed storage here\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":314},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"// Schema file for shared types - no database schemas needed since we're using in-memory storage only\n","size_bytes":102},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport TextCounter from \"@/pages/text-counter\";\nimport TextConverter from \"@/pages/text-converter\";\nimport Base64 from \"@/pages/base64\";\nimport PasswordGenerator from \"@/pages/password-generator\";\nimport QRCode from \"@/pages/qr-code\";\nimport ColorPicker from \"@/pages/color-picker\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <MainLayout title=\"Text Counter\" description=\"Real-time text analysis and statistics\">\n          <TextCounter />\n        </MainLayout>\n      </Route>\n      <Route path=\"/text-converter\">\n        <MainLayout title=\"Text Converter\" description=\"Transform text with multiple case and formatting options\">\n          <TextConverter />\n        </MainLayout>\n      </Route>\n      <Route path=\"/base64\">\n        <MainLayout title=\"Base64 Encoder/Decoder\" description=\"Encode and decode Base64 strings\">\n          <Base64 />\n        </MainLayout>\n      </Route>\n      <Route path=\"/password\">\n        <MainLayout title=\"Password Generator\" description=\"Generate secure passwords with customizable options\">\n          <PasswordGenerator />\n        </MainLayout>\n      </Route>\n      <Route path=\"/qr-code\">\n        <MainLayout title=\"QR Code Generator\" description=\"Create QR codes for text, URLs, emails, and phone numbers\">\n          <QRCode />\n        </MainLayout>\n      </Route>\n      <Route path=\"/color-picker\">\n        <MainLayout title=\"Color Picker Manager\" description=\"Pick colors and manage your color palette\">\n          <ColorPicker />\n        </MainLayout>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"light\" storageKey=\"toolmaster-ui-theme\">\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2346},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light theme */\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(222 15% 20%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 15% 20%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 15% 20%);\n  --primary: hsl(23 95% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 15% 20%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 15% 20%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(23 95% 42%);\n  --chart-1: hsl(23 95% 42%);\n  --chart-2: hsl(220 70% 50%);\n  --chart-3: hsl(140 70% 50%);\n  --chart-4: hsl(280 70% 50%);\n  --chart-5: hsl(340 70% 50%);\n  --sidebar-background: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 15% 20%);\n  --sidebar-primary: hsl(23 95% 42%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 15% 20%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(23 95% 42%);\n  --radius: 8px;\n}\n\n.dark {\n  /* Dark theme */\n  --background: hsl(222 15% 7%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 15% 12%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 15% 12%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(23 95% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 19% 18%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 19% 18%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 19% 18%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 19% 18%);\n  --input: hsl(217 19% 18%);\n  --ring: hsl(23 95% 42%);\n  --chart-1: hsl(23 95% 42%);\n  --chart-2: hsl(220 70% 50%);\n  --chart-3: hsl(140 70% 50%);\n  --chart-4: hsl(280 70% 50%);\n  --chart-5: hsl(340 70% 50%);\n  --sidebar-background: hsl(222 15% 12%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(23 95% 42%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 19% 18%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217 19% 18%);\n  --sidebar-ring: hsl(23 95% 42%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  .sidebar-transition {\n    transition: transform 0.3s ease-in-out;\n  }\n\n  .stat-card {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .copy-btn {\n    transition: all 0.15s ease-in-out;\n  }\n\n  .copy-btn:hover {\n    background-color: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n  }\n\n  .mobile-menu-overlay {\n    backdrop-filter: blur(4px);\n  }\n}\n","size_bytes":3226},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"toolmaster-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1611},"client/src/hooks/use-clipboard.ts":{"content":"import { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function useClipboard() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const copyToClipboard = async (text: string, successMessage?: string) => {\n    setIsLoading(true);\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: successMessage || \"Text copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return { copyToClipboard, isLoading };\n}\n","size_bytes":729},"client/src/hooks/use-keyboard-shortcuts.ts":{"content":"import { useEffect, useCallback } from 'react';\nimport { useLocation } from 'wouter';\n\nexport interface KeyboardShortcut {\n  key: string;\n  ctrl?: boolean;\n  alt?: boolean;\n  shift?: boolean;\n  action: () => void;\n  description: string;\n}\n\nexport function useKeyboardShortcuts(shortcuts: KeyboardShortcut[]) {\n  const handleKeyPress = useCallback((event: KeyboardEvent) => {\n    const matchingShortcut = shortcuts.find(shortcut => {\n      const keyMatch = shortcut.key.toLowerCase() === event.key.toLowerCase();\n      \n      // Exact modifier matching - all required modifiers must be present and no extra ones\n      const ctrlRequired = shortcut.ctrl || false;\n      const altRequired = shortcut.alt || false;\n      const shiftRequired = shortcut.shift || false;\n      \n      const ctrlMatch = ctrlRequired === event.ctrlKey;\n      const altMatch = altRequired === event.altKey;\n      const shiftMatch = shiftRequired === event.shiftKey;\n      \n      return keyMatch && ctrlMatch && altMatch && shiftMatch;\n    });\n\n    if (matchingShortcut) {\n      // Prevent default browser behavior for our shortcuts\n      event.preventDefault();\n      matchingShortcut.action();\n    }\n  }, [shortcuts]);\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n}\n\n// Global navigation shortcuts hook\nexport function useGlobalShortcuts() {\n  const [, navigate] = useLocation();\n\n  const globalShortcuts: KeyboardShortcut[] = [\n    {\n      key: '1',\n      alt: true,\n      action: () => navigate('/'),\n      description: 'Go to Text Counter (Alt+1)'\n    },\n    {\n      key: '2',\n      alt: true,\n      action: () => navigate('/text-converter'),\n      description: 'Go to Text Converter (Alt+2)'\n    },\n    {\n      key: '3',\n      alt: true,\n      action: () => navigate('/base64'),\n      description: 'Go to Base64 Tool (Alt+3)'\n    },\n    {\n      key: '4',\n      alt: true,\n      action: () => navigate('/password'),\n      description: 'Go to Password Generator (Alt+4)'\n    },\n    {\n      key: '5',\n      alt: true,\n      action: () => navigate('/qr-code'),\n      description: 'Go to QR Code Generator (Alt+5)'\n    },\n    {\n      key: '6',\n      alt: true,\n      action: () => navigate('/color-picker'),\n      description: 'Go to Color Picker (Alt+6)'\n    }\n  ];\n\n  useKeyboardShortcuts(globalShortcuts);\n  \n  return globalShortcuts;\n}","size_bytes":2444},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/crypto-utils.ts":{"content":"export interface PasswordOptions {\n  length: number;\n  includeUppercase: boolean;\n  includeLowercase: boolean;\n  includeNumbers: boolean;\n  includeSymbols: boolean;\n}\n\nexport function generatePassword(options: PasswordOptions): string {\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const numbers = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n\n  let charset = '';\n  if (options.includeUppercase) charset += uppercase;\n  if (options.includeLowercase) charset += lowercase;\n  if (options.includeNumbers) charset += numbers;\n  if (options.includeSymbols) charset += symbols;\n\n  if (!charset) return '';\n\n  let password = '';\n  for (let i = 0; i < options.length; i++) {\n    password += charset.charAt(Math.floor(Math.random() * charset.length));\n  }\n\n  return password;\n}\n\nexport function encodeBase64(text: string): string {\n  try {\n    return btoa(unescape(encodeURIComponent(text)));\n  } catch (error) {\n    throw new Error('Failed to encode text');\n  }\n}\n\nexport function decodeBase64(encodedText: string): string {\n  try {\n    return decodeURIComponent(escape(atob(encodedText)));\n  } catch (error) {\n    throw new Error('Invalid Base64 input');\n  }\n}\n","size_bytes":1228},"client/src/lib/export-import.ts":{"content":"export interface AppData {\n  version: string;\n  timestamp: string;\n  settings: {\n    theme: string;\n    preferences: Record<string, unknown>;\n  };\n  toolData: {\n    textCounter: {\n      lastText: string;\n      history: Array<{\n        text: string;\n        timestamp: string;\n        stats: any;\n      }>;\n    };\n    textConverter: {\n      lastInput: string;\n      lastConversion: string;\n      history: Array<{\n        input: string;\n        conversion: string;\n        result: string;\n        timestamp: string;\n      }>;\n    };\n    base64Tool: {\n      lastInput: string;\n      lastMode: 'encode' | 'decode';\n      history: Array<{\n        input: string;\n        output: string;\n        mode: 'encode' | 'decode';\n        timestamp: string;\n      }>;\n    };\n    passwordGenerator: {\n      settings: {\n        length: number;\n        includeUppercase: boolean;\n        includeLowercase: boolean;\n        includeNumbers: boolean;\n        includeSymbols: boolean;\n        excludeAmbiguous: boolean;\n      };\n      history: Array<{\n        password: string;\n        settings: any;\n        timestamp: string;\n      }>;\n    };\n    qrCodeGenerator: {\n      lastText: string;\n      lastSettings: {\n        size: number;\n        errorCorrectionLevel: string;\n        margin: number;\n      };\n      history: Array<{\n        text: string;\n        settings: any;\n        timestamp: string;\n      }>;\n    };\n    colorPicker: {\n      savedColors: Array<{\n        hex: string;\n        name?: string;\n        timestamp: string;\n      }>;\n      colorHistory: Array<{\n        hex: string;\n        timestamp: string;\n      }>;\n    };\n  };\n}\n\nexport function exportAppData(): AppData {\n  const appData: AppData = {\n    version: '1.0.0',\n    timestamp: new Date().toISOString(),\n    settings: {\n      theme: localStorage.getItem('theme') || 'light',\n      preferences: {}\n    },\n    toolData: {\n      textCounter: {\n        lastText: localStorage.getItem('textCounter_lastText') || '',\n        history: JSON.parse(localStorage.getItem('textCounter_history') || '[]')\n      },\n      textConverter: {\n        lastInput: localStorage.getItem('textConverter_lastInput') || '',\n        lastConversion: localStorage.getItem('textConverter_lastConversion') || 'uppercase',\n        history: JSON.parse(localStorage.getItem('textConverter_history') || '[]')\n      },\n      base64Tool: {\n        lastInput: localStorage.getItem('base64_lastInput') || '',\n        lastMode: (localStorage.getItem('base64_lastMode') as 'encode' | 'decode') || 'encode',\n        history: JSON.parse(localStorage.getItem('base64_history') || '[]')\n      },\n      passwordGenerator: {\n        settings: {\n          length: parseInt(localStorage.getItem('password_length') || '16'),\n          includeUppercase: localStorage.getItem('password_includeUppercase') === 'true',\n          includeLowercase: localStorage.getItem('password_includeLowercase') === 'true',\n          includeNumbers: localStorage.getItem('password_includeNumbers') === 'true',\n          includeSymbols: localStorage.getItem('password_includeSymbols') === 'true',\n          excludeAmbiguous: localStorage.getItem('password_excludeAmbiguous') === 'true'\n        },\n        history: JSON.parse(localStorage.getItem('password_history') || '[]')\n      },\n      qrCodeGenerator: {\n        lastText: localStorage.getItem('qr_lastText') || '',\n        lastSettings: JSON.parse(localStorage.getItem('qr_lastSettings') || '{\"size\": 200, \"errorCorrectionLevel\": \"M\", \"margin\": 4}'),\n        history: JSON.parse(localStorage.getItem('qr_history') || '[]')\n      },\n      colorPicker: {\n        savedColors: JSON.parse(localStorage.getItem('colorPicker_savedColors') || '[]'),\n        colorHistory: JSON.parse(localStorage.getItem('colorPicker_colorHistory') || '[]')\n      }\n    }\n  };\n\n  return appData;\n}\n\nexport function downloadAppData(filename?: string): void {\n  const appData = exportAppData();\n  const dataStr = JSON.stringify(appData, null, 2);\n  const dataBlob = new Blob([dataStr], { type: 'application/json' });\n  const url = URL.createObjectURL(dataBlob);\n  \n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename || `toolmaster-export-${new Date().toISOString().split('T')[0]}.json`;\n  link.click();\n  \n  URL.revokeObjectURL(url);\n}\n\nexport function importAppData(data: AppData): {success: boolean; message: string} {\n  try {\n    // Validate data structure\n    if (!data.version || !data.timestamp || !data.toolData) {\n      throw new Error('Invalid export file format');\n    }\n\n    // Import settings\n    if (data.settings?.theme) {\n      localStorage.setItem('theme', data.settings.theme);\n    }\n\n    // Import tool data\n    const { toolData } = data;\n\n    // Text Counter\n    if (toolData.textCounter) {\n      localStorage.setItem('textCounter_lastText', toolData.textCounter.lastText);\n      localStorage.setItem('textCounter_history', JSON.stringify(toolData.textCounter.history));\n    }\n\n    // Text Converter\n    if (toolData.textConverter) {\n      localStorage.setItem('textConverter_lastInput', toolData.textConverter.lastInput);\n      localStorage.setItem('textConverter_lastConversion', toolData.textConverter.lastConversion);\n      localStorage.setItem('textConverter_history', JSON.stringify(toolData.textConverter.history));\n    }\n\n    // Base64 Tool\n    if (toolData.base64Tool) {\n      localStorage.setItem('base64_lastInput', toolData.base64Tool.lastInput);\n      localStorage.setItem('base64_lastMode', toolData.base64Tool.lastMode);\n      localStorage.setItem('base64_history', JSON.stringify(toolData.base64Tool.history));\n    }\n\n    // Password Generator\n    if (toolData.passwordGenerator) {\n      const { settings } = toolData.passwordGenerator;\n      localStorage.setItem('password_length', settings.length.toString());\n      localStorage.setItem('password_includeUppercase', settings.includeUppercase.toString());\n      localStorage.setItem('password_includeLowercase', settings.includeLowercase.toString());\n      localStorage.setItem('password_includeNumbers', settings.includeNumbers.toString());\n      localStorage.setItem('password_includeSymbols', settings.includeSymbols.toString());\n      localStorage.setItem('password_excludeAmbiguous', settings.excludeAmbiguous.toString());\n      localStorage.setItem('password_history', JSON.stringify(toolData.passwordGenerator.history));\n    }\n\n    // QR Code Generator\n    if (toolData.qrCodeGenerator) {\n      localStorage.setItem('qr_lastText', toolData.qrCodeGenerator.lastText);\n      localStorage.setItem('qr_lastSettings', JSON.stringify(toolData.qrCodeGenerator.lastSettings));\n      localStorage.setItem('qr_history', JSON.stringify(toolData.qrCodeGenerator.history));\n    }\n\n    // Color Picker\n    if (toolData.colorPicker) {\n      localStorage.setItem('colorPicker_savedColors', JSON.stringify(toolData.colorPicker.savedColors));\n      localStorage.setItem('colorPicker_colorHistory', JSON.stringify(toolData.colorPicker.colorHistory));\n    }\n\n    return { success: true, message: 'Data imported successfully! Please refresh to see changes.' };\n  } catch (error) {\n    console.error('Import error:', error);\n    return { \n      success: false, \n      message: error instanceof Error ? error.message : 'Failed to import data'\n    };\n  }\n}\n\nexport function validateImportFile(file: File): Promise<AppData> {\n  return new Promise((resolve, reject) => {\n    if (!file.name.endsWith('.json')) {\n      reject(new Error('Please select a valid JSON file'));\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const content = e.target?.result as string;\n        const data = JSON.parse(content) as AppData;\n        \n        if (!data.version || !data.toolData) {\n          reject(new Error('Invalid export file format'));\n          return;\n        }\n        \n        resolve(data);\n      } catch (error) {\n        reject(new Error('Invalid JSON file'));\n      }\n    };\n    \n    reader.onerror = () => reject(new Error('Failed to read file'));\n    reader.readAsText(file);\n  });\n}\n\nexport function clearAllData(): {success: boolean; message: string} {\n  try {\n    const keysToRemove = [\n      'theme',\n      'textCounter_lastText',\n      'textCounter_history',\n      'textConverter_lastInput',\n      'textConverter_lastConversion',\n      'textConverter_history',\n      'base64_lastInput',\n      'base64_lastMode',\n      'base64_history',\n      'password_length',\n      'password_includeUppercase',\n      'password_includeLowercase',\n      'password_includeNumbers',\n      'password_includeSymbols',\n      'password_excludeAmbiguous',\n      'password_history',\n      'qr_lastText',\n      'qr_lastSettings',\n      'qr_history',\n      'colorPicker_savedColors',\n      'colorPicker_colorHistory'\n    ];\n\n    keysToRemove.forEach(key => localStorage.removeItem(key));\n    \n    return { success: true, message: 'All data cleared successfully! Please refresh to reset the app.' };\n  } catch (error) {\n    return { success: false, message: 'Failed to clear data' };\n  }\n}","size_bytes":9051},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/text-utils.ts":{"content":"export interface ReadabilityScore {\n  fleschReadingEase: number;\n  fleschKincaidGrade: number;\n  readingLevel: string;\n}\n\nexport interface KeywordDensity {\n  keyword: string;\n  count: number;\n  density: number;\n}\n\nexport interface TextStats {\n  characters: number;\n  charactersNoSpaces: number;\n  words: number;\n  lines: number;\n  paragraphs: number;\n  sentences: number;\n  readingTime: string;\n  fileSize: string;\n  readability?: ReadabilityScore;\n  keywordDensity?: KeywordDensity[];\n}\n\nfunction calculateReadability(text: string, words: number, sentences: number): ReadabilityScore | undefined {\n  if (words < 5 || sentences < 1) return undefined;\n\n  // Count syllables in text (approximation)\n  const syllables = text.toLowerCase()\n    .replace(/[^a-z]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => word.length > 0)\n    .reduce((total, word) => {\n      // Simple syllable counting algorithm\n      let syllableCount = word.replace(/[^aeiouy]/g, '').length;\n      if (word.endsWith('e') && syllableCount > 1) syllableCount--;\n      if (word.match(/[aeiouy]{2,}/g)) {\n        syllableCount -= (word.match(/[aeiouy]{2,}/g) || []).length;\n      }\n      return total + Math.max(1, syllableCount);\n    }, 0);\n\n  // Flesch Reading Ease Score\n  const avgWordsPerSentence = words / sentences;\n  const avgSyllablesPerWord = syllables / words;\n  const fleschReadingEase = 206.835 - (1.015 * avgWordsPerSentence) - (84.6 * avgSyllablesPerWord);\n\n  // Flesch-Kincaid Grade Level\n  const fleschKincaidGrade = (0.39 * avgWordsPerSentence) + (11.8 * avgSyllablesPerWord) - 15.59;\n\n  // Determine reading level\n  let readingLevel: string;\n  if (fleschReadingEase >= 90) readingLevel = \"Very Easy\";\n  else if (fleschReadingEase >= 80) readingLevel = \"Easy\";\n  else if (fleschReadingEase >= 70) readingLevel = \"Fairly Easy\";\n  else if (fleschReadingEase >= 60) readingLevel = \"Standard\";\n  else if (fleschReadingEase >= 50) readingLevel = \"Fairly Difficult\";\n  else if (fleschReadingEase >= 30) readingLevel = \"Difficult\";\n  else readingLevel = \"Very Difficult\";\n\n  return {\n    fleschReadingEase: Math.max(0, Math.min(100, fleschReadingEase)),\n    fleschKincaidGrade: Math.max(0, fleschKincaidGrade),\n    readingLevel,\n  };\n}\n\nfunction calculateKeywordDensity(text: string, totalWords: number): KeywordDensity[] {\n  if (totalWords < 3) return [];\n\n  const words = text.toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => word.length > 2); // Filter out words shorter than 3 characters\n\n  // Count word frequencies\n  const wordCount = new Map<string, number>();\n  words.forEach(word => {\n    wordCount.set(word, (wordCount.get(word) || 0) + 1);\n  });\n\n  // Calculate keyword density and get top 10 keywords\n  const keywordDensity: KeywordDensity[] = Array.from(wordCount.entries())\n    .map(([keyword, count]) => ({\n      keyword,\n      count,\n      density: (count / totalWords) * 100\n    }))\n    .filter(item => item.count > 1) // Only show words that appear more than once\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n\n  return keywordDensity;\n}\n\nexport function calculateTextStats(text: string): TextStats {\n  const characters = text.length;\n  const charactersNoSpaces = text.replace(/\\s/g, '').length;\n  const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\n  const lines = text.split('\\n').length;\n  const paragraphs = text.trim() ? text.trim().split(/\\n\\s*\\n/).filter(p => p.trim()).length : 0;\n  const sentences = text.trim() ? (text.match(/[.!?]+/g) || []).length : 0;\n  \n  // Calculate reading time based on 200 words per minute\n  const readingTimeMinutes = Math.ceil(words / 200);\n  const readingTime = readingTimeMinutes < 1 ? `${Math.ceil(words / 200 * 60)}s` : `${readingTimeMinutes}m`;\n  \n  const fileSize = `${(new Blob([text]).size / 1024).toFixed(1)} KB`;\n\n  // Enhanced analysis\n  const readability = calculateReadability(text, words, sentences);\n  const keywordDensity = calculateKeywordDensity(text, words);\n\n  return {\n    characters,\n    charactersNoSpaces,\n    words,\n    lines,\n    paragraphs,\n    sentences,\n    readingTime,\n    fileSize,\n    readability,\n    keywordDensity,\n  };\n}\n\nexport function convertText(text: string, conversion: string): string {\n  switch (conversion) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'title':\n      return text.replace(/\\w\\S*/g, (txt) => \n        txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n    case 'camel':\n      return text.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => \n        index === 0 ? word.toLowerCase() : word.toUpperCase()).replace(/\\s+/g, '');\n    case 'snake':\n      return text.toLowerCase().replace(/\\s+/g, '_');\n    case 'kebab':\n      return text.toLowerCase().replace(/\\s+/g, '-');\n    case 'capitalize':\n      return text.replace(/\\b\\w/g, char => char.toUpperCase());\n    case 'reverse':\n      return text.split('').reverse().join('');\n    case 'remove-spaces':\n      return text.replace(/\\s+/g, '');\n    case 'remove-lines':\n      return text.replace(/\\n+/g, ' ');\n    default:\n      return text;\n  }\n}\n","size_bytes":5122},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/base64.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { encodeBase64, decodeBase64 } from \"@/lib/crypto-utils\";\nimport { Copy, ArrowUpDown } from \"lucide-react\";\n\nexport default function Base64() {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [mode, setMode] = useState<\"encode\" | \"decode\">(\"encode\");\n  const { copyToClipboard } = useClipboard();\n  const { toast } = useToast();\n\n  const handleConvert = () => {\n    if (!input.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter text to convert\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      if (mode === \"encode\") {\n        setOutput(encodeBase64(input));\n      } else {\n        setOutput(decodeBase64(input));\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: mode === \"decode\" ? \"Invalid Base64 input\" : \"Failed to encode text\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSwapMode = () => {\n    setMode(mode === \"encode\" ? \"decode\" : \"encode\");\n    // Swap input and output if both have content\n    if (input && output) {\n      setInput(output);\n      setOutput(input);\n    }\n  };\n\n  const handleClear = () => {\n    setInput(\"\");\n    setOutput(\"\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-lg font-semibold\">\n            {mode === \"encode\" ? \"Base64 Encoder\" : \"Base64 Decoder\"}\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            {mode === \"encode\" \n              ? \"Convert text to Base64 encoded string\"\n              : \"Convert Base64 encoded string back to text\"\n            }\n          </p>\n        </div>\n        <Button \n          variant=\"outline\"\n          onClick={handleSwapMode}\n          data-testid=\"button-swap-mode\"\n        >\n          <ArrowUpDown className=\"w-4 h-4 mr-2\" />\n          Switch to {mode === \"encode\" ? \"Decode\" : \"Encode\"}\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Input */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {mode === \"encode\" ? \"Text Input\" : \"Base64 Input\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Textarea\n              placeholder={mode === \"encode\" \n                ? \"Enter text to encode...\"\n                : \"Enter Base64 string to decode...\"\n              }\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              className=\"min-h-40\"\n              data-testid=\"textarea-input\"\n            />\n            <div className=\"text-sm text-muted-foreground\">\n              {input.length} characters\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Output */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              {mode === \"encode\" ? \"Base64 Output\" : \"Text Output\"}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => copyToClipboard(output, \"Output copied to clipboard\")}\n                disabled={!output}\n                data-testid=\"button-copy-output\"\n              >\n                <Copy className=\"w-4 h-4\" />\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-muted p-4 rounded-md min-h-40 flex items-start\">\n              <span className=\"text-sm font-mono break-all whitespace-pre-wrap\">\n                {output || (\n                  <span className=\"text-muted-foreground italic\">\n                    {mode === \"encode\" ? \"Base64 encoded text\" : \"Decoded text\"} will appear here\n                  </span>\n                )}\n              </span>\n            </div>\n            {output && (\n              <div className=\"mt-2 text-sm text-muted-foreground\">\n                {output.length} characters\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Actions */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-4\">\n            <Button \n              onClick={handleConvert}\n              disabled={!input.trim()}\n              data-testid={`button-${mode}`}\n            >\n              {mode === \"encode\" ? \"Encode to Base64\" : \"Decode from Base64\"}\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={handleClear}\n              data-testid=\"button-clear\"\n            >\n              Clear All\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5065},"client/src/pages/color-picker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Trash2, Download, Plus, Copy, Search } from \"lucide-react\";\n\ninterface ColorEntry {\n  id: string;\n  name: string;\n  color: string;\n  createdAt: Date;\n}\n\nexport default function ColorPicker() {\n  const [selectedColor, setSelectedColor] = useState(\"#d45202\");\n  const [colorName, setColorName] = useState(\"\");\n  const [palette, setPalette] = useState<ColorEntry[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { copyToClipboard } = useClipboard();\n  const { toast } = useToast();\n\n  // Load palette from localStorage on mount\n  useEffect(() => {\n    const saved = localStorage.getItem(\"color-palette\");\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        setPalette(parsed.map((item: any) => ({\n          ...item,\n          createdAt: new Date(item.createdAt)\n        })));\n      } catch (error) {\n        console.error(\"Failed to load palette:\", error);\n      }\n    }\n  }, []);\n\n  // Save palette to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"color-palette\", JSON.stringify(palette));\n  }, [palette]);\n\n  const addColor = () => {\n    if (!colorName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a name for the color\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check for duplicate names\n    if (palette.some(color => color.name.toLowerCase() === colorName.toLowerCase())) {\n      toast({\n        title: \"Error\",\n        description: \"Color name already exists\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newColor: ColorEntry = {\n      id: Date.now().toString(),\n      name: colorName,\n      color: selectedColor,\n      createdAt: new Date(),\n    };\n\n    setPalette(prev => [newColor, ...prev]);\n    setColorName(\"\");\n    \n    toast({\n      title: \"Success\",\n      description: `Color \"${colorName}\" added to palette`,\n    });\n  };\n\n  const removeColor = (id: string) => {\n    setPalette(prev => prev.filter(color => color.id !== id));\n    toast({\n      title: \"Removed\",\n      description: \"Color removed from palette\",\n    });\n  };\n\n  const exportPalette = (format: \"json\" | \"css\") => {\n    if (palette.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"No colors in palette to export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let content: string;\n    let filename: string;\n\n    if (format === \"json\") {\n      content = JSON.stringify(palette, null, 2);\n      filename = `color-palette-${Date.now()}.json`;\n    } else {\n      content = `:root {\\n${palette\n        .map(color => `  --color-${color.name.toLowerCase().replace(/\\s+/g, '-')}: ${color.color};`)\n        .join('\\n')}\\n}`;\n      filename = `color-palette-${Date.now()}.css`;\n    }\n\n    const blob = new Blob([content], { type: format === \"json\" ? \"application/json\" : \"text/css\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const filteredPalette = palette.filter(color =>\n    color.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    color.color.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const hexToRgb = (hex: string) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  };\n\n  const getColorInfo = (hex: string) => {\n    const rgb = hexToRgb(hex);\n    if (!rgb) return null;\n    \n    return {\n      hex: hex.toUpperCase(),\n      rgb: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`,\n      hsl: rgbToHsl(rgb.r, rgb.g, rgb.b),\n    };\n  };\n\n  const rgbToHsl = (r: number, g: number, b: number) => {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    \n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s, l = (max + min) / 2;\n\n    if (max === min) {\n      h = s = 0;\n    } else {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      \n      switch (max) {\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n      }\n      h /= 6;\n    }\n\n    return `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;\n  };\n\n  const colorInfo = getColorInfo(selectedColor);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Color Picker */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Color Picker</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Selected Color</label>\n              <div className=\"flex items-center space-x-4\">\n                <input\n                  type=\"color\"\n                  value={selectedColor}\n                  onChange={(e) => setSelectedColor(e.target.value)}\n                  className=\"w-16 h-16 rounded-md border border-border cursor-pointer\"\n                  data-testid=\"input-color-picker\"\n                />\n                <div className=\"flex-1\">\n                  <Input\n                    value={selectedColor}\n                    onChange={(e) => setSelectedColor(e.target.value)}\n                    placeholder=\"#000000\"\n                    data-testid=\"input-color-hex\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {colorInfo && (\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium\">Color Information</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                    <span className=\"text-sm font-mono\">{colorInfo.hex}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(colorInfo.hex, \"HEX copied\")}\n                      data-testid=\"button-copy-hex\"\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                    <span className=\"text-sm font-mono\">{colorInfo.rgb}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(colorInfo.rgb, \"RGB copied\")}\n                      data-testid=\"button-copy-rgb\"\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                    <span className=\"text-sm font-mono\">{colorInfo.hsl}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(colorInfo.hsl, \"HSL copied\")}\n                      data-testid=\"button-copy-hsl\"\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Color Name</label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={colorName}\n                  onChange={(e) => setColorName(e.target.value)}\n                  placeholder=\"Enter color name...\"\n                  data-testid=\"input-color-name\"\n                />\n                <Button onClick={addColor} data-testid=\"button-add-color\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Palette Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Palette Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Search Colors</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  placeholder=\"Search by name or color...\"\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium\">Export Options</h4>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => exportPalette(\"json\")}\n                  disabled={palette.length === 0}\n                  data-testid=\"button-export-json\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export JSON\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => exportPalette(\"css\")}\n                  disabled={palette.length === 0}\n                  data-testid=\"button-export-css\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export CSS\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"pt-4 border-t border-border\">\n              <div className=\"text-center text-sm text-muted-foreground\">\n                <p>{palette.length} colors in palette</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Color Palette Grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Color Palette</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredPalette.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              {palette.length === 0 ? (\n                <p>No colors in your palette. Add some colors to get started!</p>\n              ) : (\n                <p>No colors match your search.</p>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {filteredPalette.map((color) => (\n                <div\n                  key={color.id}\n                  className=\"group relative bg-card border border-border rounded-lg overflow-hidden hover:shadow-lg transition-shadow\"\n                >\n                  <div\n                    className=\"h-20 w-full\"\n                    style={{ backgroundColor: color.color }}\n                  />\n                  <div className=\"p-3\">\n                    <h4 className=\"font-medium truncate\">{color.name}</h4>\n                    <p className=\"text-sm text-muted-foreground font-mono\">{color.color.toUpperCase()}</p>\n                    <div className=\"flex items-center justify-between mt-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {color.createdAt.toLocaleDateString()}\n                      </Badge>\n                      <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(color.color, `${color.name} copied`)}\n                          data-testid={`button-copy-color-${color.id}`}\n                        >\n                          <Copy className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeColor(color.id)}\n                          data-testid={`button-delete-color-${color.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12939},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/password-generator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generatePassword, type PasswordOptions } from \"@/lib/crypto-utils\";\nimport { Copy, RefreshCw, Shield } from \"lucide-react\";\n\nexport default function PasswordGenerator() {\n  const [password, setPassword] = useState(\"\");\n  const [options, setOptions] = useState<PasswordOptions>({\n    length: 12,\n    includeUppercase: true,\n    includeLowercase: true,\n    includeNumbers: true,\n    includeSymbols: false,\n  });\n  \n  const { copyToClipboard } = useClipboard();\n  const { toast } = useToast();\n\n  const handleGenerate = () => {\n    const hasAtLeastOneOption = \n      options.includeUppercase || \n      options.includeLowercase || \n      options.includeNumbers || \n      options.includeSymbols;\n\n    if (!hasAtLeastOneOption) {\n      toast({\n        title: \"Error\",\n        description: \"Please select at least one character type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newPassword = generatePassword(options);\n    setPassword(newPassword);\n  };\n\n  const updateOption = (key: keyof PasswordOptions, value: boolean | number) => {\n    setOptions(prev => ({ ...prev, [key]: value }));\n  };\n\n  const getStrengthColor = () => {\n    let score = 0;\n    if (options.includeUppercase) score++;\n    if (options.includeLowercase) score++;\n    if (options.includeNumbers) score++;\n    if (options.includeSymbols) score++;\n    \n    if (options.length >= 12) score++;\n    if (options.length >= 16) score++;\n\n    if (score <= 2) return \"text-red-500\";\n    if (score <= 4) return \"text-yellow-500\";\n    return \"text-green-500\";\n  };\n\n  const getStrengthText = () => {\n    let score = 0;\n    if (options.includeUppercase) score++;\n    if (options.includeLowercase) score++;\n    if (options.includeNumbers) score++;\n    if (options.includeSymbols) score++;\n    \n    if (options.length >= 12) score++;\n    if (options.length >= 16) score++;\n\n    if (score <= 2) return \"Weak\";\n    if (score <= 4) return \"Medium\";\n    return \"Strong\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Password Display */}\n      {password && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">Generated Password</h3>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(password, \"Password copied to clipboard\")}\n                  data-testid=\"button-copy-password\"\n                >\n                  <Copy className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleGenerate}\n                  data-testid=\"button-regenerate\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n            <div className=\"bg-muted p-4 rounded-md\">\n              <span className=\"text-lg font-mono break-all\" data-testid=\"text-password\">\n                {password}\n              </span>\n            </div>\n            <div className=\"mt-2 flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">{password.length} characters</span>\n              <span className={`font-medium ${getStrengthColor()}`}>\n                Strength: {getStrengthText()}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Password Options */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Password Options</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Length Slider */}\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <label className=\"text-sm font-medium\">Length</label>\n                <span className=\"text-sm text-muted-foreground\">{options.length} characters</span>\n              </div>\n              <Slider\n                value={[options.length]}\n                onValueChange={([value]) => updateOption('length', value)}\n                min={4}\n                max={50}\n                step={1}\n                className=\"w-full\"\n                data-testid=\"slider-length\"\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>4</span>\n                <span>50</span>\n              </div>\n            </div>\n\n            {/* Character Options */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-medium\">Include Characters</h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"uppercase\"\n                    checked={options.includeUppercase}\n                    onCheckedChange={(checked) => updateOption('includeUppercase', !!checked)}\n                    data-testid=\"checkbox-uppercase\"\n                  />\n                  <label htmlFor=\"uppercase\" className=\"text-sm\">\n                    Uppercase Letters (A-Z)\n                  </label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"lowercase\"\n                    checked={options.includeLowercase}\n                    onCheckedChange={(checked) => updateOption('includeLowercase', !!checked)}\n                    data-testid=\"checkbox-lowercase\"\n                  />\n                  <label htmlFor=\"lowercase\" className=\"text-sm\">\n                    Lowercase Letters (a-z)\n                  </label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"numbers\"\n                    checked={options.includeNumbers}\n                    onCheckedChange={(checked) => updateOption('includeNumbers', !!checked)}\n                    data-testid=\"checkbox-numbers\"\n                  />\n                  <label htmlFor=\"numbers\" className=\"text-sm\">\n                    Numbers (0-9)\n                  </label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"symbols\"\n                    checked={options.includeSymbols}\n                    onCheckedChange={(checked) => updateOption('includeSymbols', !!checked)}\n                    data-testid=\"checkbox-symbols\"\n                  />\n                  <label htmlFor=\"symbols\" className=\"text-sm\">\n                    Symbols (!@#$%^&*)\n                  </label>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Tips */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5\" />\n              <span>Security Tips</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5\"></div>\n                <span>Use at least 12 characters for better security</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5\"></div>\n                <span>Include a mix of character types</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5\"></div>\n                <span>Use unique passwords for each account</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5\"></div>\n                <span>Consider using a password manager</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5\"></div>\n                <span>Enable two-factor authentication when possible</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Generate Button */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <Button \n            onClick={handleGenerate} \n            size=\"lg\"\n            className=\"w-full\"\n            data-testid=\"button-generate\"\n          >\n            <Shield className=\"w-5 h-5 mr-2\" />\n            Generate Secure Password\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9281},"client/src/pages/qr-code.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { QrCode, Download, Copy, Settings, Palette, Info } from \"lucide-react\";\n\ntype QRType = \"text\" | \"url\" | \"email\" | \"phone\";\n\ninterface QRSettings {\n  size: number;\n  errorCorrectionLevel: 'L' | 'M' | 'Q' | 'H';\n  margin: number;\n  foregroundColor: string;\n  backgroundColor: string;\n}\n\ninterface QRFormData {\n  type: QRType;\n  content: string;\n  settings: QRSettings;\n}\n\nexport default function QRCodeGenerator() {\n  const [formData, setFormData] = useState<QRFormData>({\n    type: \"text\",\n    content: \"\",\n    settings: {\n      size: 300,\n      errorCorrectionLevel: 'M',\n      margin: 4,\n      foregroundColor: '#000000',\n      backgroundColor: '#FFFFFF'\n    }\n  });\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const { copyToClipboard } = useClipboard();\n  const { toast } = useToast();\n\n  const validateInput = (): boolean => {\n    if (!formData.content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter content to generate QR code\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    switch (formData.type) {\n      case \"url\":\n        try {\n          new URL(formData.content);\n        } catch {\n          toast({\n            title: \"Error\",\n            description: \"Invalid URL format\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        break;\n      case \"email\":\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.content)) {\n          toast({\n            title: \"Error\",\n            description: \"Invalid email format\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        break;\n      case \"phone\":\n        if (!/^[\\d\\s\\-\\+\\(\\)]+$/.test(formData.content)) {\n          toast({\n            title: \"Error\",\n            description: \"Invalid phone format\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        break;\n    }\n\n    return true;\n  };\n\n  const formatContent = (): string => {\n    switch (formData.type) {\n      case \"email\":\n        return `mailto:${formData.content}`;\n      case \"phone\":\n        return `tel:${formData.content}`;\n      default:\n        return formData.content;\n    }\n  };\n\n  const generateQRCode = async () => {\n    if (!validateInput()) return;\n\n    const content = formatContent();\n    const { settings } = formData;\n    \n    // Using QR Server API with enhanced customization\n    const params = new URLSearchParams({\n      data: content,\n      size: `${settings.size}x${settings.size}`,\n      ecc: settings.errorCorrectionLevel,\n      margin: settings.margin.toString(),\n      color: settings.foregroundColor.replace('#', ''),\n      bgcolor: settings.backgroundColor.replace('#', ''),\n      qzone: '0',  // Quiet zone\n      format: 'png'\n    });\n\n    const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?${params.toString()}`;\n    setQrCodeUrl(qrApiUrl);\n  };\n\n  const downloadQRCode = async () => {\n    if (!qrCodeUrl) return;\n\n    try {\n      const response = await fetch(qrCodeUrl);\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `qr-code-${formData.settings.size}x${formData.settings.size}-${Date.now()}.png`;\n      link.click();\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: \"QR code downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download QR code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetToDefaults = () => {\n    setFormData(prev => ({\n      ...prev,\n      settings: {\n        size: 300,\n        errorCorrectionLevel: 'M',\n        margin: 4,\n        foregroundColor: '#000000',\n        backgroundColor: '#FFFFFF'\n      }\n    }));\n  };\n\n  const getErrorCorrectionDescription = (level: string) => {\n    switch (level) {\n      case 'L': return 'Low (~7%)';\n      case 'M': return 'Medium (~15%)';\n      case 'Q': return 'Quartile (~25%)';\n      case 'H': return 'High (~30%)';\n      default: return '';\n    }\n  };\n\n  const getPlaceholder = (): string => {\n    switch (formData.type) {\n      case \"url\":\n        return \"https://example.com\";\n      case \"email\":\n        return \"user@example.com\";\n      case \"phone\":\n        return \"+1 (555) 123-4567\";\n      default:\n        return \"Enter your text here...\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"content\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n            <QrCode className=\"w-4 h-4\" />\n            Content\n          </TabsTrigger>\n          <TabsTrigger value=\"customize\" className=\"flex items-center gap-2\">\n            <Settings className=\"w-4 h-4\" />\n            Customize\n          </TabsTrigger>\n          <TabsTrigger value=\"preview\" className=\"flex items-center gap-2\">\n            <Palette className=\"w-4 h-4\" />\n            Preview\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Content Tab */}\n        <TabsContent value=\"content\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>QR Code Content</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"content-type\">Content Type</Label>\n                <Select \n                  value={formData.type} \n                  onValueChange={(value: QRType) => setFormData(prev => ({ ...prev, type: value }))}\n                >\n                  <SelectTrigger data-testid=\"select-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"text\">Plain Text</SelectItem>\n                    <SelectItem value=\"url\">URL</SelectItem>\n                    <SelectItem value=\"email\">Email</SelectItem>\n                    <SelectItem value=\"phone\">Phone</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"content\">Content</Label>\n                {formData.type === \"text\" ? (\n                  <Textarea\n                    id=\"content\"\n                    placeholder={getPlaceholder()}\n                    value={formData.content}\n                    onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                    className=\"min-h-32\"\n                    data-testid=\"textarea-content\"\n                  />\n                ) : (\n                  <Input\n                    id=\"content\"\n                    placeholder={getPlaceholder()}\n                    value={formData.content}\n                    onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                    data-testid=\"input-content\"\n                  />\n                )}\n                <p className=\"text-xs text-muted-foreground\">\n                  {formData.content.length} characters\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Customize Tab */}\n        <TabsContent value=\"customize\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Size and Quality Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"w-4 h-4\" />\n                  Size & Quality\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"size\">QR Code Size</Label>\n                  <Select \n                    value={formData.settings.size.toString()} \n                    onValueChange={(value) => setFormData(prev => ({\n                      ...prev,\n                      settings: { ...prev.settings, size: parseInt(value) }\n                    }))}\n                  >\n                    <SelectTrigger data-testid=\"select-size\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"150\">Small (150×150)</SelectItem>\n                      <SelectItem value=\"200\">Medium (200×200)</SelectItem>\n                      <SelectItem value=\"300\">Large (300×300)</SelectItem>\n                      <SelectItem value=\"400\">Extra Large (400×400)</SelectItem>\n                      <SelectItem value=\"500\">Huge (500×500)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"error-correction\">Error Correction Level</Label>\n                  <Select \n                    value={formData.settings.errorCorrectionLevel} \n                    onValueChange={(value: 'L' | 'M' | 'Q' | 'H') => setFormData(prev => ({\n                      ...prev,\n                      settings: { ...prev.settings, errorCorrectionLevel: value }\n                    }))}\n                  >\n                    <SelectTrigger data-testid=\"select-error-correction\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"L\">L - {getErrorCorrectionDescription('L')}</SelectItem>\n                      <SelectItem value=\"M\">M - {getErrorCorrectionDescription('M')}</SelectItem>\n                      <SelectItem value=\"Q\">Q - {getErrorCorrectionDescription('Q')}</SelectItem>\n                      <SelectItem value=\"H\">H - {getErrorCorrectionDescription('H')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Higher error correction allows the QR code to be read even when partially damaged\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"margin\">Margin</Label>\n                  <Select \n                    value={formData.settings.margin.toString()} \n                    onValueChange={(value) => setFormData(prev => ({\n                      ...prev,\n                      settings: { ...prev.settings, margin: parseInt(value) }\n                    }))}\n                  >\n                    <SelectTrigger data-testid=\"select-margin\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"0\">No margin</SelectItem>\n                      <SelectItem value=\"2\">Small margin</SelectItem>\n                      <SelectItem value=\"4\">Medium margin</SelectItem>\n                      <SelectItem value=\"6\">Large margin</SelectItem>\n                      <SelectItem value=\"10\">Extra large margin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Color Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Palette className=\"w-4 h-4\" />\n                  Colors\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fg-color\">Foreground Color</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"fg-color\"\n                      type=\"color\"\n                      value={formData.settings.foregroundColor}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, foregroundColor: e.target.value }\n                      }))}\n                      className=\"w-16 h-10 p-1 border rounded\"\n                      data-testid=\"input-fg-color\"\n                    />\n                    <Input\n                      value={formData.settings.foregroundColor}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, foregroundColor: e.target.value }\n                      }))}\n                      placeholder=\"#000000\"\n                      className=\"flex-1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bg-color\">Background Color</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"bg-color\"\n                      type=\"color\"\n                      value={formData.settings.backgroundColor}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, backgroundColor: e.target.value }\n                      }))}\n                      className=\"w-16 h-10 p-1 border rounded\"\n                      data-testid=\"input-bg-color\"\n                    />\n                    <Input\n                      value={formData.settings.backgroundColor}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, backgroundColor: e.target.value }\n                      }))}\n                      placeholder=\"#FFFFFF\"\n                      className=\"flex-1\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <Label>Color Presets</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setFormData(prev => ({\n                        ...prev,\n                        settings: {\n                          ...prev.settings,\n                          foregroundColor: '#000000',\n                          backgroundColor: '#FFFFFF'\n                        }\n                      }))}\n                      className=\"justify-start\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-black border rounded-sm\"></div>\n                        <div className=\"w-4 h-4 bg-white border rounded-sm\"></div>\n                        <span>Classic</span>\n                      </div>\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setFormData(prev => ({\n                        ...prev,\n                        settings: {\n                          ...prev.settings,\n                          foregroundColor: '#FFFFFF',\n                          backgroundColor: '#000000'\n                        }\n                      }))}\n                      className=\"justify-start\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-white border rounded-sm\"></div>\n                        <div className=\"w-4 h-4 bg-black border rounded-sm\"></div>\n                        <span>Inverted</span>\n                      </div>\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setFormData(prev => ({\n                        ...prev,\n                        settings: {\n                          ...prev.settings,\n                          foregroundColor: '#d45202',\n                          backgroundColor: '#FFFFFF'\n                        }\n                      }))}\n                      className=\"justify-start\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-orange-600 border rounded-sm\"></div>\n                        <div className=\"w-4 h-4 bg-white border rounded-sm\"></div>\n                        <span>Orange</span>\n                      </div>\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setFormData(prev => ({\n                        ...prev,\n                        settings: {\n                          ...prev.settings,\n                          foregroundColor: '#1e40af',\n                          backgroundColor: '#f8fafc'\n                        }\n                      }))}\n                      className=\"justify-start\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-blue-700 border rounded-sm\"></div>\n                        <div className=\"w-4 h-4 bg-slate-50 border rounded-sm\"></div>\n                        <span>Blue</span>\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={resetToDefaults}\n                  className=\"w-full\"\n                  data-testid=\"button-reset-settings\"\n                >\n                  Reset to Defaults\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Preview Tab */}\n        <TabsContent value=\"preview\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <QrCode className=\"w-5 h-5\" />\n                  Generated QR Code\n                </div>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"secondary\">\n                    {formData.settings.size}×{formData.settings.size}\n                  </Badge>\n                  <Badge variant=\"secondary\">\n                    {formData.settings.errorCorrectionLevel}\n                  </Badge>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-center min-h-80 bg-muted rounded-md\">\n                  {qrCodeUrl ? (\n                    <div className=\"text-center space-y-4\">\n                      <div \n                        className=\"mx-auto rounded-md shadow-lg\"\n                        style={{ backgroundColor: formData.settings.backgroundColor, padding: '16px' }}\n                      >\n                        <img \n                          src={qrCodeUrl} \n                          alt=\"Generated QR Code\" \n                          className=\"mx-auto max-w-full h-auto\"\n                          style={{ \n                            width: `${Math.min(formData.settings.size, 400)}px`,\n                            height: `${Math.min(formData.settings.size, 400)}px`\n                          }}\n                          data-testid=\"img-qr-code\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium\">Content:</p>\n                        <p className=\"text-sm text-muted-foreground bg-muted p-2 rounded break-all\">\n                          {formData.content}\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-muted-foreground\">\n                      <QrCode className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                      <p>Enter content and generate QR code</p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex justify-center gap-3\">\n                  <Button \n                    onClick={generateQRCode} \n                    disabled={!formData.content.trim()}\n                    data-testid=\"button-generate\"\n                  >\n                    <QrCode className=\"w-4 h-4 mr-2\" />\n                    Generate QR Code\n                  </Button>\n                  {qrCodeUrl && (\n                    <>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => copyToClipboard(formData.content, \"Content copied to clipboard\")}\n                        data-testid=\"button-copy-content\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy Content\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={downloadQRCode}\n                        data-testid=\"button-download\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                    </>\n                  )}\n                </div>\n\n                {qrCodeUrl && (\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <p className=\"text-xs text-muted-foreground\">Size</p>\n                      <p className=\"text-sm font-medium\">{formData.settings.size}×{formData.settings.size}</p>\n                    </div>\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <p className=\"text-xs text-muted-foreground\">Error Correction</p>\n                      <p className=\"text-sm font-medium\">{getErrorCorrectionDescription(formData.settings.errorCorrectionLevel)}</p>\n                    </div>\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <p className=\"text-xs text-muted-foreground\">Margin</p>\n                      <p className=\"text-sm font-medium\">{formData.settings.margin}px</p>\n                    </div>\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <p className=\"text-xs text-muted-foreground\">Colors</p>\n                      <div className=\"flex items-center justify-center gap-1 mt-1\">\n                        <div \n                          className=\"w-3 h-3 rounded-sm border\" \n                          style={{ backgroundColor: formData.settings.foregroundColor }}\n                        ></div>\n                        <div \n                          className=\"w-3 h-3 rounded-sm border\" \n                          style={{ backgroundColor: formData.settings.backgroundColor }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Information */}\n      <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            <Info className=\"w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0\" />\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Usage Tips</h4>\n              <ul className=\"text-sm text-blue-700 dark:text-blue-200 space-y-1\">\n                <li>• <strong>Plain Text:</strong> Any text content you want to share</li>\n                <li>• <strong>URL:</strong> Web addresses that open when scanned</li>\n                <li>• <strong>Email:</strong> Opens email app with pre-filled recipient</li>\n                <li>• <strong>Phone:</strong> Opens dialer with the phone number</li>\n                <li>• <strong>Error Correction:</strong> Higher levels make QR codes more resistant to damage</li>\n                <li>• <strong>Colors:</strong> Ensure sufficient contrast for reliable scanning</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":25199},"client/src/pages/text-converter.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BatchProcessor } from \"@/components/ui/batch-processor\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { convertText } from \"@/lib/text-utils\";\nimport { Copy, RotateCcw } from \"lucide-react\";\n\nconst conversions = [\n  { key: 'uppercase', label: 'UPPERCASE', icon: '↑' },\n  { key: 'lowercase', label: 'lowercase', icon: '↓' },\n  { key: 'title', label: 'Title Case', icon: 'Tt' },\n  { key: 'camel', label: 'camelCase', icon: 'cC' },\n  { key: 'snake', label: 'snake_case', icon: '_' },\n  { key: 'kebab', label: 'kebab-case', icon: '-' },\n  { key: 'capitalize', label: 'Capitalize Words', icon: 'Ww' },\n  { key: 'reverse', label: 'Reverse Text', icon: '⟲' },\n  { key: 'remove-spaces', label: 'Remove Spaces', icon: '⌫' },\n  { key: 'remove-lines', label: 'Remove Line Breaks', icon: '⤴' },\n];\n\nexport default function TextConverter() {\n  const [inputText, setInputText] = useState(\"\");\n  const { copyToClipboard } = useClipboard();\n\n  const handleClear = () => {\n    setInputText(\"\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Input Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Text Input</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Enter text to convert...\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              className=\"min-h-32\"\n              data-testid=\"textarea-input\"\n            />\n            <div className=\"flex justify-between items-center\">\n              <div className=\"text-sm text-muted-foreground\">\n                {inputText.length} characters\n              </div>\n              <div className=\"flex gap-2\">\n                <BatchProcessor mode=\"converter\" />\n                <Button \n                  variant=\"outline\"\n                  onClick={handleClear}\n                  data-testid=\"button-clear\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Clear\n                </Button>\n              </div>\n            </div>\n            {!inputText.trim() && (\n              <div className=\"text-sm text-destructive\">\n                Enter text to convert\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Conversion Results */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {conversions.map((conversion) => {\n          const convertedText = inputText ? convertText(inputText, conversion.key) : \"\";\n          \n          return (\n            <Card key={conversion.key}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-lg font-mono\">{conversion.icon}</span>\n                    <h3 className=\"font-medium\">{conversion.label}</h3>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(convertedText, `${conversion.label} copied`)}\n                    disabled={!convertedText}\n                    data-testid={`button-copy-${conversion.key}`}\n                  >\n                    <Copy className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <div className=\"bg-muted p-3 rounded-md min-h-[3rem] flex items-center\">\n                  <span className=\"text-sm font-mono break-all\">\n                    {convertedText || (\n                      <span className=\"text-muted-foreground italic\">\n                        Converted text will appear here\n                      </span>\n                    )}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4155},"client/src/pages/text-counter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BatchProcessor } from \"@/components/ui/batch-processor\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { useKeyboardShortcuts, type KeyboardShortcut } from \"@/hooks/use-keyboard-shortcuts\";\nimport { calculateTextStats, type TextStats } from \"@/lib/text-utils\";\nimport { \n  Calculator, \n  Type, \n  FileText, \n  List, \n  Hash, \n  Clock, \n  HardDrive,\n  Copy,\n  Download,\n  RotateCcw,\n  Trash2,\n  Info,\n  BookOpen,\n  TrendingUp\n} from \"lucide-react\";\n\nconst MAX_SIZE_KB = 512;\nconst MAX_SIZE_BYTES = MAX_SIZE_KB * 1024;\n\nexport default function TextCounter() {\n  const [text, setText] = useState(\"\");\n  const [stats, setStats] = useState<TextStats>(() => calculateTextStats(\"\"));\n  const { copyToClipboard } = useClipboard();\n\n  useEffect(() => {\n    setStats(calculateTextStats(text));\n  }, [text]);\n\n  const handleClear = () => {\n    setText(\"\");\n  };\n\n  const handleCopyAll = () => {\n    const statsText = `Text Statistics:\nCharacters: ${stats.characters}\nCharacters (no spaces): ${stats.charactersNoSpaces}\nWords: ${stats.words}\nLines: ${stats.lines}\nParagraphs: ${stats.paragraphs}\nSentences: ${stats.sentences}\nReading Time: ${stats.readingTime}\nFile Size: ${stats.fileSize}`;\n    \n    copyToClipboard(statsText, \"All statistics copied to clipboard\");\n  };\n\n  const handleExport = () => {\n    const statsData = {\n      text: text.substring(0, 100) + (text.length > 100 ? '...' : ''),\n      statistics: stats,\n      timestamp: new Date().toISOString()\n    };\n    \n    const dataStr = JSON.stringify(statsData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `text-stats-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Tool-specific keyboard shortcuts\n  const shortcuts: KeyboardShortcut[] = [\n    {\n      key: 'c',\n      ctrl: true,\n      shift: true,\n      action: handleCopyAll,\n      description: 'Copy all statistics (Ctrl+Shift+C)'\n    },\n    {\n      key: 'r',\n      ctrl: true,\n      action: handleClear,\n      description: 'Clear text (Ctrl+R)'\n    },\n    {\n      key: 'e',\n      ctrl: true,\n      shift: true,\n      action: handleExport,\n      description: 'Export statistics (Ctrl+Shift+E)'\n    }\n  ];\n\n  useKeyboardShortcuts(shortcuts);\n\n  const currentSizeBytes = new Blob([text]).size;\n  const isOverLimit = currentSizeBytes > MAX_SIZE_BYTES;\n\n  const statCards = [\n    { icon: Calculator, label: \"Characters\", value: stats.characters, color: \"bg-primary/10 text-primary\" },\n    { icon: Type, label: \"Chars (no spaces)\", value: stats.charactersNoSpaces, color: \"bg-blue-500/10 text-blue-500\" },\n    { icon: FileText, label: \"Words\", value: stats.words, color: \"bg-green-500/10 text-green-500\" },\n    { icon: List, label: \"Lines\", value: stats.lines, color: \"bg-purple-500/10 text-purple-500\" },\n    { icon: Hash, label: \"Paragraphs\", value: stats.paragraphs, color: \"bg-indigo-500/10 text-indigo-500\" },\n    { icon: FileText, label: \"Sentences\", value: stats.sentences, color: \"bg-yellow-500/10 text-yellow-500\" },\n    { icon: Clock, label: \"Reading Time\", value: stats.readingTime, color: \"bg-pink-500/10 text-pink-500\" },\n    { icon: HardDrive, label: \"File Size\", value: stats.fileSize, color: \"bg-red-500/10 text-red-500\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Input Section */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"mb-4\">\n            <label htmlFor=\"text-input\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Enter your text to analyze\n            </label>\n            <div className=\"relative\">\n              <Textarea\n                id=\"text-input\"\n                placeholder=\"Start typing to see real-time statistics...\"\n                className=\"min-h-40 resize-none\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                data-testid=\"textarea-text-input\"\n              />\n              <div className=\"absolute bottom-3 right-3 text-xs text-muted-foreground\">\n                <span className={isOverLimit ? \"text-destructive font-medium\" : \"\"}>\n                  {(currentSizeBytes / 1024).toFixed(1)} KB\n                </span> / {MAX_SIZE_KB} KB max\n              </div>\n            </div>\n            <div className=\"mt-2 flex items-center justify-between text-xs text-muted-foreground\">\n              <span>Maximum text size: {MAX_SIZE_KB}KB</span>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={handleClear}\n                className=\"text-primary hover:text-primary/80 h-auto p-0\"\n                data-testid=\"button-clear\"\n              >\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Clear\n              </Button>\n            </div>\n            {isOverLimit && (\n              <div className=\"mt-2 text-xs text-destructive\">\n                Text exceeds maximum size limit of {MAX_SIZE_KB}KB\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {statCards.map((stat, index) => (\n          <Card key={stat.label} className=\"stat-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${stat.color}`}>\n                    <stat.icon className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{stat.label}</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{stat.value}</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"copy-btn\"\n                  onClick={() => copyToClipboard(stat.value.toString(), `${stat.label} copied`)}\n                  data-testid={`button-copy-${stat.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Copy className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Additional Actions */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Quick Actions</h3>\n          <div className=\"flex flex-wrap gap-3\">\n            <BatchProcessor mode=\"counter\" />\n            <Button \n              onClick={handleCopyAll}\n              data-testid=\"button-copy-all\"\n            >\n              <Copy className=\"w-4 h-4 mr-2\" />\n              Copy All Stats\n            </Button>\n            <Button \n              variant=\"secondary\"\n              onClick={handleExport}\n              data-testid=\"button-export\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Stats\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={handleClear}\n              data-testid=\"button-reset\"\n            >\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Reset\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Readability Analysis */}\n      {stats.readability && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <BookOpen className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"text-lg font-semibold text-foreground\">Readability Analysis</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Flesch Reading Ease</p>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.readability.fleschReadingEase.toFixed(1)}</p>\n                <Badge \n                  variant=\"secondary\" \n                  className={`mt-1 ${\n                    stats.readability.fleschReadingEase >= 70 \n                      ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'\n                      : stats.readability.fleschReadingEase >= 50\n                      ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300'\n                      : 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'\n                  }`}\n                >\n                  {stats.readability.readingLevel}\n                </Badge>\n              </div>\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Grade Level</p>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.readability.fleschKincaidGrade.toFixed(1)}</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">Flesch-Kincaid</p>\n              </div>\n              <div className=\"flex flex-col justify-center\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(\n                    `Readability: ${stats.readability?.readingLevel} (${stats.readability?.fleschReadingEase.toFixed(1)} score, Grade ${stats.readability?.fleschKincaidGrade.toFixed(1)})`,\n                    \"Readability analysis copied\"\n                  )}\n                  data-testid=\"button-copy-readability\"\n                >\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  Copy Analysis\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Keyword Density */}\n      {stats.keywordDensity && stats.keywordDensity.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <TrendingUp className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"text-lg font-semibold text-foreground\">Top Keywords</h3>\n              <Badge variant=\"secondary\">{stats.keywordDensity.length} keywords</Badge>\n            </div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2\">\n              {stats.keywordDensity.map((item, index) => (\n                <div \n                  key={index} \n                  className=\"flex items-center justify-between p-2 bg-muted rounded-md hover:bg-accent transition-colors cursor-pointer\"\n                  onClick={() => copyToClipboard(item.keyword, `\"${item.keyword}\" copied`)}\n                  data-testid={`keyword-${index}`}\n                >\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium truncate\">{item.keyword}</p>\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                      <span>{item.count}x</span>\n                      <span>•</span>\n                      <span>{item.density.toFixed(1)}%</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-4 pt-3 border-t border-border\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => copyToClipboard(\n                  stats.keywordDensity?.map(item => `${item.keyword} (${item.count}x, ${item.density.toFixed(1)}%)`).join('\\n') || '',\n                  \"Keyword density analysis copied\"\n                )}\n                data-testid=\"button-copy-keywords\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copy All Keywords\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Information Panel */}\n      <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Info className=\"w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0\" />\n            <div>\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-1\">Analysis Information</h4>\n              <div className=\"space-y-1 text-sm text-blue-700 dark:text-blue-200\">\n                <p>• Reading time is based on 200 words per minute average</p>\n                <p>• Readability uses Flesch Reading Ease and Flesch-Kincaid Grade Level formulas</p>\n                <p>• Keyword density shows the most frequently used words (3+ characters, appearing 2+ times)</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13268},"client/src/pages/todos.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search, Trash2, Edit3, Calendar, CheckCircle2 } from \"lucide-react\";\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: Date;\n}\n\nexport default function Todos() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editingText, setEditingText] = useState(\"\");\n  const [deleteId, setDeleteId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Load todos from localStorage on mount\n  useEffect(() => {\n    const saved = localStorage.getItem(\"todos\");\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        setTodos(parsed.map((todo: any) => ({\n          ...todo,\n          createdAt: new Date(todo.createdAt)\n        })));\n      } catch (error) {\n        console.error(\"Failed to load todos:\", error);\n      }\n    }\n  }, []);\n\n  // Save todos to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = () => {\n    if (!newTodo.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a todo item\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newTodo.trim().length < 3) {\n      toast({\n        title: \"Error\",\n        description: \"Todo must be at least 3 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const todo: Todo = {\n      id: Date.now().toString(),\n      title: newTodo.trim(),\n      completed: false,\n      createdAt: new Date(),\n    };\n\n    setTodos(prev => [todo, ...prev]);\n    setNewTodo(\"\");\n    \n    toast({\n      title: \"Success\",\n      description: \"Todo added successfully\",\n    });\n  };\n\n  const toggleComplete = (id: string) => {\n    setTodos(prev => prev.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const startEditing = (todo: Todo) => {\n    setEditingId(todo.id);\n    setEditingText(todo.title);\n  };\n\n  const saveEdit = () => {\n    if (!editingText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Todo cannot be empty\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingText.trim().length < 3) {\n      toast({\n        title: \"Error\",\n        description: \"Todo must be at least 3 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setTodos(prev => prev.map(todo =>\n      todo.id === editingId ? { ...todo, title: editingText.trim() } : todo\n    ));\n    \n    setEditingId(null);\n    setEditingText(\"\");\n    \n    toast({\n      title: \"Success\",\n      description: \"Todo updated successfully\",\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditingText(\"\");\n  };\n\n  const deleteTodo = () => {\n    if (!deleteId) return;\n    \n    setTodos(prev => prev.filter(todo => todo.id !== deleteId));\n    setDeleteId(null);\n    \n    toast({\n      title: \"Success\",\n      description: \"Todo deleted successfully\",\n    });\n  };\n\n  const filteredTodos = todos.filter(todo =>\n    todo.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const completedCount = todos.filter(todo => todo.completed).length;\n  const totalCount = todos.length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <CheckCircle2 className=\"w-8 h-8 mx-auto mb-2 text-green-500\" />\n            <p className=\"text-2xl font-bold\">{completedCount}</p>\n            <p className=\"text-sm text-muted-foreground\">Completed</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <Calendar className=\"w-8 h-8 mx-auto mb-2 text-blue-500\" />\n            <p className=\"text-2xl font-bold\">{totalCount - completedCount}</p>\n            <p className=\"text-sm text-muted-foreground\">Pending</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"w-8 h-8 mx-auto mb-2 bg-primary/10 rounded-full flex items-center justify-center\">\n              <span className=\"text-primary font-bold\">{totalCount}</span>\n            </div>\n            <p className=\"text-2xl font-bold\">{totalCount}</p>\n            <p className=\"text-sm text-muted-foreground\">Total</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add New Todo */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Add New Todo</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <Input\n              value={newTodo}\n              onChange={(e) => setNewTodo(e.target.value)}\n              placeholder=\"What needs to be done?\"\n              onKeyDown={(e) => e.key === 'Enter' && addTodo()}\n              data-testid=\"input-new-todo\"\n            />\n            <Button onClick={addTodo} data-testid=\"button-add-todo\">\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n            <Input\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search todos...\"\n              className=\"pl-10\"\n              data-testid=\"input-search-todos\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Todos List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Todo List</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredTodos.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              {todos.length === 0 ? (\n                <p>No todos yet. Add your first todo above!</p>\n              ) : (\n                <p>No todos match your search.</p>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {filteredTodos.map((todo) => (\n                <div\n                  key={todo.id}\n                  className={`flex items-center space-x-3 p-3 rounded-lg border transition-colors ${\n                    todo.completed \n                      ? 'bg-muted/50 border-muted' \n                      : 'bg-card border-border hover:bg-accent/50'\n                  }`}\n                >\n                  <Checkbox\n                    checked={todo.completed}\n                    onCheckedChange={() => toggleComplete(todo.id)}\n                    data-testid={`checkbox-todo-${todo.id}`}\n                  />\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    {editingId === todo.id ? (\n                      <div className=\"flex gap-2\">\n                        <Input\n                          value={editingText}\n                          onChange={(e) => setEditingText(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') saveEdit();\n                            if (e.key === 'Escape') cancelEdit();\n                          }}\n                          className=\"flex-1\"\n                          autoFocus\n                          data-testid={`input-edit-todo-${todo.id}`}\n                        />\n                        <Button size=\"sm\" onClick={saveEdit} data-testid={`button-save-${todo.id}`}>\n                          Save\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" onClick={cancelEdit} data-testid={`button-cancel-${todo.id}`}>\n                          Cancel\n                        </Button>\n                      </div>\n                    ) : (\n                      <div>\n                        <p className={`${todo.completed ? 'line-through text-muted-foreground' : ''}`}>\n                          {todo.title}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {todo.createdAt.toLocaleDateString()}\n                          </Badge>\n                          {todo.completed && (\n                            <Badge className=\"text-xs bg-green-500\">\n                              Completed\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {editingId !== todo.id && (\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => startEditing(todo)}\n                        data-testid={`button-edit-${todo.id}`}\n                      >\n                        <Edit3 className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setDeleteId(todo.id)}\n                        data-testid={`button-delete-${todo.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteId} onOpenChange={() => setDeleteId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Todo</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this todo? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={deleteTodo} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":11146},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { KeyboardShortcutsHelp } from \"@/components/ui/keyboard-shortcuts-help\";\nimport { DataManagement } from \"@/components/ui/data-management\";\nimport { Menu } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  description: string;\n  onMenuClick: () => void;\n}\n\nexport function Header({ title, description, onMenuClick }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4 flex items-center justify-between\">\n      <div className=\"flex items-center space-x-4\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"lg:hidden\"\n          onClick={onMenuClick}\n          data-testid=\"button-mobile-menu\"\n        >\n          <Menu className=\"w-4 h-4\" />\n        </Button>\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">{title}</h1>\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-3\">\n        <DataManagement />\n        <KeyboardShortcutsHelp />\n        <div className=\"hidden sm:flex items-center space-x-2 text-sm text-muted-foreground\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n          <span>Offline Mode</span>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1354},"client/src/components/layout/main-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\nimport { Header } from \"./header\";\nimport { useGlobalShortcuts } from \"@/hooks/use-keyboard-shortcuts\";\n\ninterface MainLayoutProps {\n  title: string;\n  description: string;\n  children: React.ReactNode;\n}\n\nexport function MainLayout({ title, description, children }: MainLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  \n  // Enable global keyboard shortcuts\n  useGlobalShortcuts();\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title={title}\n          description={description}\n          onMenuClick={() => setSidebarOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1022},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { \n  Calculator, \n  Code, \n  Key, \n  QrCode, \n  Palette, \n  RefreshCw,\n  Moon,\n  Sun,\n  X,\n  Menu\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst tools = [\n  {\n    category: \"Text Tools\",\n    items: [\n      { path: \"/\", icon: Calculator, label: \"Text Counter\" },\n      { path: \"/text-converter\", icon: RefreshCw, label: \"Text Converter\" },\n      { path: \"/base64\", icon: Code, label: \"Base64 Encoder\" },\n    ]\n  },\n  {\n    category: \"Security\",\n    items: [\n      { path: \"/password\", icon: Key, label: \"Password Generator\" },\n    ]\n  },\n  {\n    category: \"Visual Tools\",\n    items: [\n      { path: \"/qr-code\", icon: QrCode, label: \"QR Code Generator\" },\n      { path: \"/color-picker\", icon: Palette, label: \"Color Picker\" },\n    ]\n  },\n];\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/20 mobile-menu-overlay z-40 lg:hidden\"\n          onClick={onClose}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n      \n      {/* Sidebar */}\n      <aside className={`fixed lg:static inset-y-0 left-0 z-50 w-72 bg-sidebar border-r border-sidebar-border sidebar-transition transform ${\n        isOpen ? 'translate-x-0' : '-translate-x-full'\n      } lg:translate-x-0`}>\n        <div className=\"flex flex-col h-full\">\n          {/* Logo Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-sidebar-border\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Menu className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <span className=\"font-bold text-xl text-sidebar-foreground\">ToolMaster</span>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              className=\"lg:hidden\"\n              onClick={onClose}\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Navigation Menu */}\n          <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n            {tools.map((category) => (\n              <div key={category.category} className=\"mb-6\">\n                <h3 className=\"text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider mb-3 px-3\">\n                  {category.category}\n                </h3>\n                <div className=\"space-y-1\">\n                  {category.items.map((item) => (\n                    <Link key={item.path} href={item.path}>\n                      <Button\n                        variant={location === item.path ? \"default\" : \"ghost\"}\n                        className={`w-full justify-start space-x-3 ${\n                          location === item.path \n                            ? \"bg-sidebar-primary text-sidebar-primary-foreground font-medium\" \n                            : \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n                        }`}\n                        onClick={() => window.innerWidth < 1024 && onClose()}\n                        data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <item.icon className=\"w-5 h-5\" />\n                        <span>{item.label}</span>\n                      </Button>\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </nav>\n\n          {/* Theme Toggle & Settings */}\n          <div className=\"p-4 border-t border-sidebar-border\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-sidebar-foreground/70\">Theme</span>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={toggleTheme}\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"dark\" ? (\n                  <Sun className=\"w-4 h-4\" />\n                ) : (\n                  <Moon className=\"w-4 h-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n}\n","size_bytes":4647},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/batch-processor.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Layers, \n  Play, \n  Download, \n  Copy,\n  X,\n  FileText,\n  Settings,\n  Info,\n  CheckCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useClipboard } from \"@/hooks/use-clipboard\";\nimport { calculateTextStats, convertText, type TextStats } from \"@/lib/text-utils\";\n\ninterface BatchItem {\n  id: string;\n  text: string;\n  processed: boolean;\n  result?: any;\n}\n\ninterface BatchProcessorProps {\n  mode: 'counter' | 'converter';\n  onProcess?: (items: BatchItem[]) => void;\n}\n\nexport function BatchProcessor({ mode, onProcess }: BatchProcessorProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [items, setItems] = useState<BatchItem[]>([]);\n  const [processing, setProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [conversionType, setConversionType] = useState('uppercase');\n  const [separator, setSeparator] = useState('\\n---\\n');\n  const { toast } = useToast();\n  const { copyToClipboard } = useClipboard();\n\n  const addItems = (text: string) => {\n    const texts = text.split(separator).filter(t => t.trim());\n    const newItems: BatchItem[] = texts.map((text, index) => ({\n      id: `item-${Date.now()}-${index}`,\n      text: text.trim(),\n      processed: false\n    }));\n    setItems(prev => [...prev, ...newItems]);\n  };\n\n  const removeItem = (id: string) => {\n    setItems(prev => prev.filter(item => item.id !== id));\n  };\n\n  const clearAll = () => {\n    setItems([]);\n    setProgress(0);\n  };\n\n  const processBatch = async () => {\n    if (items.length === 0) return;\n\n    setProcessing(true);\n    setProgress(0);\n\n    const processedItems: BatchItem[] = [];\n    \n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      let result: any;\n\n      if (mode === 'counter') {\n        result = calculateTextStats(item.text);\n      } else if (mode === 'converter') {\n        result = {\n          original: item.text,\n          converted: convertText(item.text, conversionType),\n          conversion: conversionType\n        };\n      }\n\n      processedItems.push({\n        ...item,\n        processed: true,\n        result\n      });\n\n      setProgress(((i + 1) / items.length) * 100);\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulate processing time\n    }\n\n    setItems(processedItems);\n    setProcessing(false);\n    onProcess?.(processedItems);\n\n    toast({\n      title: \"Batch Processing Complete\",\n      description: `Processed ${processedItems.length} items successfully.`,\n    });\n  };\n\n  const exportResults = () => {\n    if (mode === 'counter') {\n      const results = items\n        .filter(item => item.processed && item.result)\n        .map(item => ({\n          text: item.text.substring(0, 100) + (item.text.length > 100 ? '...' : ''),\n          statistics: item.result,\n          timestamp: new Date().toISOString()\n        }));\n\n      const dataStr = JSON.stringify(results, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `batch-text-analysis-${new Date().toISOString().split('T')[0]}.json`;\n      link.click();\n      URL.revokeObjectURL(url);\n    } else if (mode === 'converter') {\n      const results = items\n        .filter(item => item.processed && item.result)\n        .map(item => `${item.result.converted}`)\n        .join('\\n\\n');\n\n      copyToClipboard(results, \"Batch conversion results copied to clipboard\");\n    }\n  };\n\n  const copySummary = () => {\n    if (mode === 'counter') {\n      const summary = items\n        .filter(item => item.processed && item.result)\n        .map((item, index) => {\n          const stats = item.result as TextStats;\n          return `Text ${index + 1}: ${stats.words} words, ${stats.characters} chars, ${stats.readingTime}`;\n        })\n        .join('\\n');\n\n      copyToClipboard(summary, \"Batch summary copied to clipboard\");\n    } else if (mode === 'converter') {\n      const summary = `Batch Conversion Summary:\nConversion Type: ${conversionType}\nItems Processed: ${items.filter(item => item.processed).length}\nTotal Items: ${items.length}`;\n      \n      copyToClipboard(summary, \"Batch summary copied to clipboard\");\n    }\n  };\n\n  const processedCount = items.filter(item => item.processed).length;\n  const modeTitle = mode === 'counter' ? 'Text Analysis' : 'Text Conversion';\n  const modeIcon = mode === 'counter' ? FileText : Settings;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\"\n          size=\"sm\"\n          className=\"text-primary hover:text-primary\"\n          data-testid={`button-batch-${mode}`}\n        >\n          <Layers className=\"w-4 h-4 mr-2\" />\n          Batch {modeTitle}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Layers className=\"w-5 h-5\" />\n            Batch {modeTitle}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"input\" className=\"space-y-4\">\n          <TabsList className=\"grid grid-cols-3 w-full\">\n            <TabsTrigger value=\"input\" className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              Input\n            </TabsTrigger>\n            <TabsTrigger value=\"processing\" className=\"flex items-center gap-2\">\n              <Play className=\"w-4 h-4\" />\n              Process\n            </TabsTrigger>\n            <TabsTrigger value=\"results\" className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Results ({processedCount})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"input\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Add Texts to Process</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Text Separator\n                  </label>\n                  <Select value={separator} onValueChange={setSeparator}>\n                    <SelectTrigger data-testid=\"select-separator\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\\n---\\n\">Line separator (---)</SelectItem>\n                      <SelectItem value=\"\\n\\n\">Double line break</SelectItem>\n                      <SelectItem value=\"\\n\">Single line break</SelectItem>\n                      <SelectItem value=\"|\">Pipe (|)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {mode === 'converter' && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Conversion Type\n                    </label>\n                    <Select value={conversionType} onValueChange={setConversionType}>\n                      <SelectTrigger data-testid=\"select-conversion\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"uppercase\">UPPERCASE</SelectItem>\n                        <SelectItem value=\"lowercase\">lowercase</SelectItem>\n                        <SelectItem value=\"title\">Title Case</SelectItem>\n                        <SelectItem value=\"camel\">camelCase</SelectItem>\n                        <SelectItem value=\"snake\">snake_case</SelectItem>\n                        <SelectItem value=\"kebab\">kebab-case</SelectItem>\n                        <SelectItem value=\"capitalize\">Capitalize Words</SelectItem>\n                        <SelectItem value=\"reverse\">Reverse Text</SelectItem>\n                        <SelectItem value=\"remove-spaces\">Remove Spaces</SelectItem>\n                        <SelectItem value=\"remove-lines\">Remove Line Breaks</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Paste multiple texts (separated by your chosen separator)\n                  </label>\n                  <Textarea\n                    placeholder={`Enter texts separated by \"${separator}\"\\n\\nExample:\\nFirst text here${separator}Second text here${separator}Third text here`}\n                    className=\"min-h-32\"\n                    onChange={(e) => {\n                      if (e.target.value.trim()) {\n                        addItems(e.target.value);\n                        e.target.value = '';\n                      }\n                    }}\n                    data-testid=\"textarea-batch-input\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {items.length > 0 && (\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle className=\"text-base\">\n                    Items to Process ({items.length})\n                  </CardTitle>\n                  <Button variant=\"outline\" size=\"sm\" onClick={clearAll}>\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Clear All\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                    {items.map((item, index) => (\n                      <div\n                        key={item.id}\n                        className=\"flex items-center justify-between p-2 bg-muted rounded-md\"\n                      >\n                        <div className=\"flex items-center space-x-3 min-w-0 flex-1\">\n                          <Badge variant={item.processed ? \"default\" : \"secondary\"}>\n                            {index + 1}\n                          </Badge>\n                          <p className=\"text-sm truncate\">\n                            {item.text.substring(0, 60)}\n                            {item.text.length > 60 ? '...' : ''}\n                          </p>\n                          {item.processed && (\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                          )}\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeItem(item.id)}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"processing\" className=\"space-y-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                {items.length === 0 ? (\n                  <Alert>\n                    <Info className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Add some texts in the Input tab before processing.\n                    </AlertDescription>\n                  </Alert>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">Ready to Process</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {items.length} items ready • {mode === 'counter' ? 'Text analysis' : `${conversionType} conversion`}\n                        </p>\n                      </div>\n                      <Button\n                        onClick={processBatch}\n                        disabled={processing || items.length === 0}\n                        data-testid=\"button-start-processing\"\n                      >\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {processing ? 'Processing...' : 'Start Processing'}\n                      </Button>\n                    </div>\n\n                    {processing && (\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium\">Processing...</span>\n                          <span className=\"text-sm text-muted-foreground\">{progress.toFixed(0)}%</span>\n                        </div>\n                        <Progress value={progress} />\n                      </div>\n                    )}\n\n                    {processedCount > 0 && !processing && (\n                      <Alert className=\"border-green-200 bg-green-50 dark:bg-green-950\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          Successfully processed {processedCount} out of {items.length} items!\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"results\" className=\"space-y-4\">\n            {processedCount === 0 ? (\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription>\n                  No results yet. Process your texts first.\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <div className=\"space-y-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"text-base\">Results Summary</CardTitle>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" onClick={copySummary}>\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy Summary\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={exportResults}>\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Export\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-2xl font-bold text-primary\">{processedCount}</p>\n                        <p className=\"text-xs text-muted-foreground\">Processed</p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold text-primary\">{items.length}</p>\n                        <p className=\"text-xs text-muted-foreground\">Total Items</p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold text-primary\">\n                          {items.length > 0 ? ((processedCount / items.length) * 100).toFixed(0) : 0}%\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">Success Rate</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Individual Results</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                      {items.filter(item => item.processed).map((item, index) => (\n                        <div\n                          key={item.id}\n                          className=\"p-3 bg-muted rounded-md\"\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <Badge variant=\"outline\">{index + 1}</Badge>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {item.text.length} characters\n                            </p>\n                          </div>\n                          \n                          {mode === 'counter' && item.result && (\n                            <div className=\"text-sm space-y-1\">\n                              <p><strong>Words:</strong> {item.result.words}</p>\n                              <p><strong>Characters:</strong> {item.result.characters}</p>\n                              <p><strong>Reading Time:</strong> {item.result.readingTime}</p>\n                              {item.result.readability && (\n                                <p><strong>Reading Level:</strong> {item.result.readability.readingLevel}</p>\n                              )}\n                            </div>\n                          )}\n                          \n                          {mode === 'converter' && item.result && (\n                            <div className=\"text-sm space-y-2\">\n                              <div>\n                                <p className=\"font-medium text-muted-foreground\">Original:</p>\n                                <p className=\"bg-background p-2 rounded border\">\n                                  {item.result.original}\n                                </p>\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-muted-foreground\">Converted:</p>\n                                <p className=\"bg-background p-2 rounded border\">\n                                  {item.result.converted}\n                                </p>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":18968},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/data-management.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Database, \n  Download, \n  Upload, \n  Trash2, \n  FileText, \n  AlertTriangle,\n  CheckCircle,\n  Info\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  exportAppData, \n  downloadAppData, \n  importAppData, \n  validateImportFile, \n  clearAllData,\n  type AppData \n} from \"@/lib/export-import\";\n\nexport function DataManagement() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [importing, setImporting] = useState(false);\n  const [importProgress, setImportProgress] = useState(0);\n  const [importStatus, setImportStatus] = useState<{type: 'success' | 'error' | null, message: string}>({type: null, message: ''});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleExport = () => {\n    try {\n      downloadAppData();\n      toast({\n        title: \"Export Successful\",\n        description: \"Your data has been exported successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export your data. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setImporting(true);\n    setImportProgress(0);\n    setImportStatus({type: null, message: ''});\n\n    try {\n      setImportProgress(25);\n      const data = await validateImportFile(file);\n      \n      setImportProgress(50);\n      await new Promise(resolve => setTimeout(resolve, 500)); // Show progress\n      \n      setImportProgress(75);\n      const result = importAppData(data);\n      \n      setImportProgress(100);\n      \n      if (result.success) {\n        setImportStatus({type: 'success', message: result.message});\n        toast({\n          title: \"Import Successful\",\n          description: result.message,\n        });\n      } else {\n        setImportStatus({type: 'error', message: result.message});\n        toast({\n          title: \"Import Failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      setImportStatus({\n        type: 'error', \n        message: error instanceof Error ? error.message : 'Import failed'\n      });\n      toast({\n        title: \"Import Failed\",\n        description: error instanceof Error ? error.message : 'Import failed',\n        variant: \"destructive\",\n      });\n    } finally {\n      setImporting(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleClearData = () => {\n    const confirmed = window.confirm(\n      'Are you sure you want to clear all data? This action cannot be undone. Consider exporting your data first.'\n    );\n\n    if (confirmed) {\n      const result = clearAllData();\n      if (result.success) {\n        toast({\n          title: \"Data Cleared\",\n          description: result.message,\n        });\n        setImportStatus({type: 'success', message: result.message});\n      } else {\n        toast({\n          title: \"Clear Failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n        setImportStatus({type: 'error', message: result.message});\n      }\n    }\n  };\n\n  const getDataSummary = () => {\n    try {\n      const data = exportAppData();\n      let totalItems = 0;\n      \n      Object.values(data.toolData).forEach(toolData => {\n        if ('history' in toolData && Array.isArray(toolData.history)) {\n          totalItems += toolData.history.length;\n        }\n        if ('savedColors' in toolData && Array.isArray(toolData.savedColors)) {\n          totalItems += toolData.savedColors.length;\n        }\n        if ('colorHistory' in toolData && Array.isArray(toolData.colorHistory)) {\n          totalItems += toolData.colorHistory.length;\n        }\n      });\n\n      return {\n        totalItems,\n        dataSize: `${(JSON.stringify(data).length / 1024).toFixed(1)} KB`,\n        lastModified: data.timestamp,\n      };\n    } catch {\n      return { totalItems: 0, dataSize: '0 KB', lastModified: new Date().toISOString() };\n    }\n  };\n\n  const dataSummary = getDataSummary();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          className=\"text-muted-foreground hover:text-foreground\"\n          data-testid=\"button-data-management\"\n        >\n          <Database className=\"w-4 h-4 mr-2\" />\n          Data\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Database className=\"w-5 h-5\" />\n            Data Management\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Data Summary */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base\">Data Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold text-primary\">{dataSummary.totalItems}</p>\n                  <p className=\"text-xs text-muted-foreground\">Total Items</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-primary\">{dataSummary.dataSize}</p>\n                  <p className=\"text-xs text-muted-foreground\">Data Size</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium\">\n                    {new Date(dataSummary.lastModified).toLocaleDateString()}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">Last Updated</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Export Section */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Download className=\"w-4 h-4\" />\n                Export Data\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Download all your tool data, settings, and history as a JSON file. This creates a complete backup of your ToolMaster data.\n              </p>\n              <Button \n                onClick={handleExport}\n                className=\"w-full\"\n                data-testid=\"button-export-data\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export All Data\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Import Section */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Upload className=\"w-4 h-4\" />\n                Import Data\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Restore your data from a previously exported JSON file. This will overwrite your current data.\n              </p>\n              \n              {importing && (\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Importing...</span>\n                    <span className=\"text-sm text-muted-foreground\">{importProgress}%</span>\n                  </div>\n                  <Progress value={importProgress} />\n                </div>\n              )}\n\n              {importStatus.type && (\n                <Alert className={`mb-4 ${importStatus.type === 'success' ? 'border-green-200 bg-green-50 dark:bg-green-950' : ''}`}>\n                  {importStatus.type === 'success' ? (\n                    <CheckCircle className=\"h-4 w-4\" />\n                  ) : (\n                    <AlertTriangle className=\"h-4 w-4\" />\n                  )}\n                  <AlertDescription>\n                    {importStatus.message}\n                  </AlertDescription>\n                </Alert>\n              )}\n              \n              <div className=\"space-y-3\">\n                <Input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".json\"\n                  onChange={handleImport}\n                  disabled={importing}\n                  data-testid=\"input-import-file\"\n                />\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <FileText className=\"w-3 h-3\" />\n                  <span>Only JSON files exported from ToolMaster are supported</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Clear Data Section */}\n          <Card className=\"border-destructive/20\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2 text-destructive\">\n                <Trash2 className=\"w-4 h-4\" />\n                Clear All Data\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Permanently delete all your ToolMaster data including tool history, settings, and saved items. This action cannot be undone.\n              </p>\n              <Button \n                variant=\"destructive\"\n                onClick={handleClearData}\n                className=\"w-full\"\n                data-testid=\"button-clear-data\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Clear All Data\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Information */}\n          <div className=\"flex items-start gap-2 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-md border border-blue-200 dark:border-blue-800\">\n            <Info className=\"w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n            <div className=\"text-sm text-blue-700 dark:text-blue-200\">\n              <p className=\"font-medium mb-1\">Data Storage:</p>\n              <ul className=\"space-y-1 text-xs\">\n                <li>• All data is stored locally in your browser</li>\n                <li>• Export regularly to prevent data loss</li>\n                <li>• Imported data will overwrite existing data</li>\n                <li>• Page refresh required after import/clear operations</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11222},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/keyboard-shortcuts-help.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Keyboard, HelpCircle } from \"lucide-react\";\n\ninterface ShortcutItemProps {\n  keys: string;\n  description: string;\n}\n\nfunction ShortcutItem({ keys, description }: ShortcutItemProps) {\n  const keyParts = keys.split('+').map(key => key.trim());\n  \n  return (\n    <div className=\"flex items-center justify-between py-2\">\n      <span className=\"text-sm\">{description}</span>\n      <div className=\"flex gap-1\">\n        {keyParts.map((key, index) => (\n          <div key={index} className=\"flex items-center\">\n            <Badge variant=\"outline\" className=\"px-2 py-1 text-xs font-mono\">\n              {key}\n            </Badge>\n            {index < keyParts.length - 1 && (\n              <span className=\"mx-1 text-muted-foreground\">+</span>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function KeyboardShortcutsHelp() {\n  const globalShortcuts = [\n    { keys: \"Alt + 1\", description: \"Go to Text Counter\" },\n    { keys: \"Alt + 2\", description: \"Go to Text Converter\" },\n    { keys: \"Alt + 3\", description: \"Go to Base64 Tool\" },\n    { keys: \"Alt + 4\", description: \"Go to Password Generator\" },\n    { keys: \"Alt + 5\", description: \"Go to QR Code Generator\" },\n    { keys: \"Alt + 6\", description: \"Go to Color Picker\" },\n  ];\n\n  const textCounterShortcuts = [\n    { keys: \"Ctrl + Shift + C\", description: \"Copy all statistics\" },\n    { keys: \"Ctrl + R\", description: \"Clear text\" },\n    { keys: \"Ctrl + Shift + E\", description: \"Export statistics\" },\n  ];\n\n  const generalShortcuts = [\n    { keys: \"Ctrl + C\", description: \"Copy selected text\" },\n    { keys: \"Ctrl + V\", description: \"Paste text\" },\n    { keys: \"Ctrl + A\", description: \"Select all text\" },\n    { keys: \"Escape\", description: \"Close dialogs/modals\" },\n  ];\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          className=\"text-muted-foreground hover:text-foreground\"\n          data-testid=\"button-keyboard-shortcuts\"\n        >\n          <Keyboard className=\"w-4 h-4 mr-2\" />\n          Shortcuts\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Keyboard className=\"w-5 h-5\" />\n            Keyboard Shortcuts\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base\">Global Navigation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-1\">\n                {globalShortcuts.map((shortcut, index) => (\n                  <ShortcutItem \n                    key={index}\n                    keys={shortcut.keys}\n                    description={shortcut.description}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base\">Text Counter</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-1\">\n                {textCounterShortcuts.map((shortcut, index) => (\n                  <ShortcutItem \n                    key={index}\n                    keys={shortcut.keys}\n                    description={shortcut.description}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base\">General</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-1\">\n                {generalShortcuts.map((shortcut, index) => (\n                  <ShortcutItem \n                    key={index}\n                    keys={shortcut.keys}\n                    description={shortcut.description}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex items-start gap-2 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-md border border-blue-200 dark:border-blue-800\">\n            <HelpCircle className=\"w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n            <div className=\"text-sm text-blue-700 dark:text-blue-200\">\n              <p className=\"font-medium mb-1\">Pro Tips:</p>\n              <ul className=\"space-y-1 text-xs\">\n                <li>• Keyboard shortcuts work on all pages</li>\n                <li>• Use Alt + number keys for quick navigation</li>\n                <li>• Tool-specific shortcuts are shown in context</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5122},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}